- Fast Input/Output:
ios_base::sync_with_stdio(false);
cin.tie(NULL);


INT_MAX
INT_MIN
LLONG_MIN
LLONG_MAX

- Basic Input/Output:
int a;
cin >> a;
cout << a << "\n";

String:
.stoi()
.stoll()
.substr(start, size)

- Reading multiple values:
int n;
vector<int> arr(n);
for (int i = 0; i < n; i++) cin >> arr[i];

### (a) Vectors
- Dynamic array:
vector<int> v; // Declare
v.push_back(10); // Add element
v.pop_back(); // Remove last element
int x = v[0]; // Access element
v.resize(n, 0); // Dynamic initialization
vector<vector<int>> chars(n, vector<int>(26)); // 2D

- Sorting:
sort(v.begin(), v.end());

- Iteration:
for (int x : v) cout << x << " ";

### (c) TreeSet
set<int> s;
s.insert(10);
s.erase(10);
if (s.find(10) != s.end()) cout << "Found";
lower_bound(x) first element >= x // iterator
upper_bound(y) first element > y // iterator
s.erase(a, b) erase all in range [a, b)
*prev(mySet.end()); // largest element // iterator

### (d) Unordered Set
unordered_set<int> us;
us.insert(10);
us.erase(10);
us.clear();
us.empty();
us.size();
us.contains();

### (e) TreeMap
map<int, int> m;
m[1] = 100;
m[2] = 200;
cout << m[1]; // Access value by key
auto smallest = myMap.begin();
auto largest = --myMap.end();
myMap.erase(1);
myMap.erase(myMap.begin());

### (f) Unordered Map
unordered_map<int, int> um;
um[1] = 100;
um[2] = 200;
cout << um[1]; // Access value by key
for (const auto& pair : map)

### (g) Priority Queue
- Max-Heap:
priority_queue<int> pq;
pq.push(10);
pq.push(20);
cout << pq.top(); // 20
pq.pop();

- Min-Heap:
priority_queue<int, vector<int>, greater<>> pq;
priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;

- Custor Comparator
    struct Compare {
        bool operator()(const Task& a, const Task& b) const {
            if (a.priority == b.priority) {
                return a.taskId < b.taskId;
            }
            return a.priority < b.priority;
        }
    };

    priority_queue<Task, vector<Task>, Compare> pq;



### (h) Deque
deque<int> dq;
dq.push_front(10);
dq.push_back(20);
dq.pop_front();

---

## 3. Algorithms
- Custom comparator sorting:
sort(arr.begin(), arr.end(), [](int a, int b) {
    return a > b; // Sort in descending order
});


### (b) Binary Search
- Using STL:
if (binary_search(v.begin(), v.end(), x)) cout << "Found";

- Lower and upper bounds:
auto lb = lower_bound(v.begin(), v.end(), x); // First element >= x
auto ub = upper_bound(v.begin(), v.end(), x); // First element > x

### (c) GCD/LCM
int g = __gcd(a, b);
int l = lcm(a, b);

## 4. Graph Algorithms

### (c) BFS
queue<int> q;
q.push(start);
visited[start] = true;
while (!q.empty()) {
    int node = q.front();
    q.pop();
    for (int neighbor : adj[node]) {
        if (!visited[neighbor]) {
            visited[neighbor] = true;
            q.push(neighbor);
        }
    }
}

## 6. Math Utilities

### (b) Prime Numbers
vector<bool> is_prime(n + 1, true);
is_prime[0] = is_prime[1] = false;
for (int i = 2; i * i <= n; i++) {
    if (is_prime[i]) {
        for (int j = i * i; j <= n; j += i) {
            is_prime[j] = false;
        }
    }
}

## 7. Templates

### Template for Competitive Programming
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back
#define all(v) v.begin(), v.end()
const int MOD = 1e9 + 7;

void solve() {
    // Problem-specific code
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int t;
    cin >> t;
    while (t--) solve();
    return 0;
}